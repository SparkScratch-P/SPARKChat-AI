
// AI Chatbot Script - Generated by Chatbot Editor
// Based on your original script.js with full customization
(function() {
  'use strict';
  
  // Configuration
  const CONFIG = {
  "primaryColor": "#11998e",
  "secondaryColor": "#38ef7d",
  "backgroundColor": "#ffffff",
  "textColor": "#2c2c2c",
  "borderColor": "rgba(255, 255, 255, 0.2)",
  "glowColor": "rgba(17, 153, 142, 0.3)",
  "fontFamily": "Segoe UI, Tahoma, Geneva, Verdana, sans-serif",
  "fontSize": "14px",
  "fontWeight": "400",
  "systemPrompt": "You are a helpful customer support assistant. Be friendly, professional, and provide clear solutions to customer inquiries.\n\nAlways be helpful, accurate, and maintain a professional yet friendly tone.",
  "botName": "Jack",
  "welcomeMessage": "Hello! How can I help you today?",
  "placeholder": "Type your message...",
  "apiKey": "_API_KEY_HERE_", // Replace with your OpenRouter API key
  "apiUrl": "https://openrouter.ai/api/v1/chat/completions",
  "model": "nousresearch/deephermes-3-mistral-24b-preview:free",
  "maxTokens": 500,
  "temperature": 0.7,
  "timeout": 30000,
  "linkedin": "https://www.linkedin.com/in/prodyumna-pal",
  "scholar": "https://scholar.google.com/citations?user=3wLqIbcAAAAJ",
  "portfolio": "https://sparkscratch-p.github.io",
  "saePost": "https://www.linkedin.com/posts/saeindia-gsv_epitome25-prodyumna-pal-activity-7196076534421745665-9FvD",
  "resume": "https://drive.google.com/file/d/1vP9iF9o9k0EPjWrs3aYsA-J4ZPfz3gwn/view",
  "orcid": "https://orcid.org/0009-0006-2270-3593",
  "github": "https://github.com/sparkscratch-p",
  "githubRepos": "https://api.github.com/users/sparkscratch-p/repos",
  "homeUrl": "https://sparkscratch-p.github.io",
  "projectsUrl": "https://sparkscratch-p.github.io/projects",
  "aboutUrl": "https://sparkscratch-p.github.io/about",
  "blogUrl": "https://sparkscratch-p.github.io/blog",
  "contactUrl": "https://sparkscratch-p.github.io/contact",
  "position": "bottom-right",
  "chatWidth": "350px",
  "chatHeight": "500px",
  "iconSize": "60px",
  "borderRadius": "20px",
  "animationDuration": "0.3s",
  "hoverScale": "1.1",
  "backdropBlur": "10px",
  "enableGlow": true,
  "enableBlur": true,
  "enableAnimations": true,
  "enableSound": false,
  "enableEmojis": true,
  "maxMessages": 100,
  "enableAutoResize": true,
  "enableClickOutside": true,
  "resumeContent": "Prodyumna Pal\nSoftware & Electronics Developer || Research Author\n+91 8777595690 prodyumna.pal_btech24@gsv.ac.in Available on Linkedin, Github, Google Scholar, ORCiD\nVadodara, Gujarat\n\nSKILLS\nElectronics Arduino/ESP IoT, Embedded C, Drones & Unmanned Systems, CAD, PCB Design, Telemetry, Mechatronics\nWeb Development Web Development, Web Application, Front End Development, Software Engineering\nLanguages and Tools Python, HTML, CSS, Javascript, JSON, Node.js, C, GitHub, Algorithms, OpenCV, Blink IoT Core\nGraphics and Engagement User Experience/User Interface, Filmora, Canva\n\nEXPERIENCE\nSoftware & Electronics Developer 12/2021 - Present\nSPARK\nMy personal collaborative environment focused on innovative product development.\nIdeated new product concepts with R&D, leveraging emerging technologies of IoT and Web development.\nCollaborated with cross-functional teams for viability assessments and solving real-world problems.\n\nAssociate Member 01/2025 - Present\nSAEINDIA\nAn educational and professional organization advancing automotive technology.\nDeveloper in Mechatronics Domain of SAE India Collegiate Club of GSV.\nDesigned UAVs, RC Cars and intelligent automotive projects.\n\nEditor-in-Charge 10/2022 - 12/2023\nTeam Graphics\nLed a creative team focused on graphics and video production for events.\nOrganised and Mentored a graphics and video-editing team for programs including Chrysalis 2022 for an audience of 5000, a 12 hr video project.\nLeveraged Adobe Premiere Pro and Filmora for professional-quality outputs, increasing positive feedback by 70%.\n\nEditor 09/2020 - 07/2022\nScratch Wiki\nCommunity-driven platform for sharing development resources.\nAuthored guides in the Scratch Wiki, to assist other budding developers with guides.\n\nEDUCATION\nB.Tech in Electronics and Communication (Spec.: Rail) Vadodara, Gujarat\nGati Shakti Vishwavidyalaya, Ministry of Railways 09/2024 - Present\nHigh School || School Captain Kolkata, WB\nDelhi Public School, (Joka) South Kolkata, CBSE 04/2018 - 03/2024\n\nKEY ACHIEVEMENTS\nRecognition for Railway Electric Monitor Project\nAwarded the Certificate of Merit 2022-23, Annual Science Fair, Birla Industrial and Technological Museum, Ministry of Culture, Govt. of India\n\nGitHub OSS Developer\nRanked 'A+' in Open-Source Software (OSS) Development by GitHub (2021-22)\n\nScience Olympiad Foundation\nSOF IGKO (Zonal Distinction) 2021, IMO (Academic Excellence) 2023 & 10 more over 5 years of Participation\n\nRESEARCH PAPERS\nProlonged Suspicious Inactivity Monitoring of Old Aged People\nInternational Journal of Scientific Research in Engineering and Management (IJSREM) I.F: 8.17 01/2024 Vol 8, Issue 1\nAn IoT Arduino and GSM/LTE based Safety Monitoring System for Old Aged People Staying Alone in Apartments\n\nEvent Identification with Motion Detection\nInternational Journal for Multidisciplinary Research (IJFMR) I.F: 9.24 06/2024 Vol 6 Issue 3\nIdentifying events through simplified fundamentals as an enhancement for the potential of applied motion detection technology, rendering interaction of computers to the physical world.\n\nPROJECTS\nOperation Clatsop 11/2024 - Present\nA state-of-the-art UAV project focusing on internet-based control.\nEngineered a bicopter drone with high-end mechatronics and thrust vectoring capabilities.\nProgrammed a custom flight controller using ESP32 for internet-based control from scratch.\nDeveloped semi-autonomous modes and smart control systems with advanced sensors.\nConducting ongoing research on target locking and engagement for Fire-and-Forget Technology.\n\nThe Quiz Live 03/2023 - 04/2023\nAn interactive web-based quiz designed for large audience participation.\nUsed coding and frameworks to render a real-time interactive quiz for Despedida '23, engaging an audience of 700.\nThe quiz featured questions on a stage screen with mobile phone responses including audio, video, and images.\nApplied strategic algorithms for cloud load management.\n\nRailway Regenerative Electric Monitor 11/2022 - 12/2022\nComputer Vision and Electrical Circuits as an augmented System.\nA project focusing on enhancing sustainability in railway systems.\nDeveloped and presented an innovative concept demonstrating complementary uses of railway regenerative braking.\nRecognized at the BITM National Science Fair with over 1,000 attendees and delegates."
};
  
  // Create and inject styles
  const styles = `
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: '${CONFIG.fontFamily}';
    }

    body {
      color: ${CONFIG.textColor};
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #chatButton {
      position: fixed;
      ${CONFIG.position.includes('right') ? 'right: 20px;' : 'left: 20px;'}
      ${CONFIG.position.includes('bottom') ? 'bottom: 20px;' : 'top: 20px;'}
      width: ${CONFIG.iconSize};
      height: ${CONFIG.iconSize};
      border-radius: 50%;
      background: linear-gradient(135deg, ${CONFIG.primaryColor}, ${CONFIG.secondaryColor});
      border: none;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: all ${CONFIG.animationDuration} ease;
      z-index: 1000;
      box-shadow: 0 4px 15px ${CONFIG.glowColor},
                  inset 0 2px 5px rgba(255, 255, 255, 0.3);
    }

    #chatButton:hover {
      transform: scale(${CONFIG.hoverScale});
      box-shadow: 0 6px 20px ${CONFIG.glowColor},
                  inset 0 2px 5px rgba(255, 255, 255, 0.4);
    }

    #chatButton::before {
      content: '';
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255, 255, 255, 0.8);
      border-radius: 50%;
      transition: all ${CONFIG.animationDuration} ease;
      box-shadow: 0 0 10px ${CONFIG.glowColor};
    }

    #chatButton:hover::before {
      transform: scale(1.2);
      border-color: #ffffff;
      box-shadow: 0 0 15px ${CONFIG.glowColor};
    }

    #chatContainer {
      position: fixed;
      ${CONFIG.position.includes('bottom') ? 'bottom: calc(' + CONFIG.iconSize + ' + 30px);' : 'top: calc(' + CONFIG.iconSize + ' + 30px);'}
      ${CONFIG.position.includes('right') ? 'right: 20px;' : 'left: 20px;'}
      width: ${CONFIG.chatWidth};
      height: ${CONFIG.chatHeight};
      background: rgba(255, 255, 255, 0.15);
      ${CONFIG.enableBlur ? 'backdrop-filter: blur(' + CONFIG.backdropBlur + ');' : ''}
      ${CONFIG.enableBlur ? '-webkit-backdrop-filter: blur(' + CONFIG.backdropBlur + ');' : ''}
      border: 1px solid ${CONFIG.borderColor};
      border-radius: ${CONFIG.borderRadius};
      display: none;
      flex-direction: column;
      overflow: hidden;
      z-index: 999;
      opacity: 0;
      transform: translateY(20px);
      transition: all ${CONFIG.animationDuration} ease;
      ${CONFIG.enableGlow ? 'box-shadow: 0 10px 30px ' + CONFIG.glowColor + ', inset 0 0 20px rgba(255, 255, 255, 0.1);' : ''}
    }

    #chatContainer.active {
      opacity: 1;
      transform: translateY(0);
    }

    #chatHeader {
      padding: 15px;
      background: linear-gradient(135deg, ${CONFIG.primaryColor}, ${CONFIG.secondaryColor});
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid ${CONFIG.borderColor};
      position: relative;
      overflow: hidden;
    }

    #chatHeader::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg,
        rgba(255, 255, 255, 0.2),
        rgba(255, 255, 255, 0.1)
      );
      z-index: 0;
    }

    #chatHeader h3 {
      position: relative;
      z-index: 1;
      color: #ffffff;
      font-weight: 600;
      font-size: 1.1rem;
      ${CONFIG.enableGlow ? 'text-shadow: 0 0 10px ' + CONFIG.glowColor + ';' : ''}
    }

    #closeButton {
      position: relative;
      z-index: 1;
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: #ffffff;
      cursor: pointer;
      font-size: 20px;
      width: 28px;
      height: 28px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all ${CONFIG.animationDuration} ease;
      ${CONFIG.enableGlow ? 'box-shadow: 0 0 10px ' + CONFIG.glowColor + ';' : ''}
    }

    #closeButton:hover {
      background: rgba(255, 255, 255, 0.3);
      ${CONFIG.enableAnimations ? 'transform: rotate(90deg);' : ''}
      ${CONFIG.enableGlow ? 'box-shadow: 0 0 15px ' + CONFIG.glowColor + ';' : ''}
    }

    .message {
      max-width: 85%;
      padding: 10px 15px;
      border-radius: 15px;
      line-height: 1.5;
      ${CONFIG.enableAnimations ? 'animation: messageSlide ' + CONFIG.animationDuration + ' ease;' : ''}
      margin: 4px 0;
      font-size: ${CONFIG.fontSize};
      font-weight: ${CONFIG.fontWeight};
      ${CONFIG.enableBlur ? 'backdrop-filter: blur(5px);' : ''}
      ${CONFIG.enableBlur ? '-webkit-backdrop-filter: blur(5px);' : ''}
    }

    @keyframes messageSlide {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .user-message {
      align-self: flex-end;
      background: linear-gradient(135deg, ${CONFIG.primaryColor}, ${CONFIG.secondaryColor});
      color: #ffffff;
      border: 1px solid ${CONFIG.borderColor};
      ${CONFIG.enableGlow ? 'box-shadow: 0 2px 10px ' + CONFIG.glowColor + ';' : ''}
    }

    .bot-message {
      align-self: flex-start;
      background: rgba(255, 255, 255, 0.15);
      color: ${CONFIG.textColor};
      border: 1px solid ${CONFIG.borderColor};
      ${CONFIG.enableGlow ? 'box-shadow: 0 2px 10px rgba(0, 242, 254, 0.1);' : ''}
    }

    .bot-message p {
      margin: 5px 0;
      color: ${CONFIG.textColor};
    }

    .bot-message a {
      color: #0066cc;
      text-decoration: none;
      transition: all ${CONFIG.animationDuration} ease;
      font-weight: 500;
      ${CONFIG.enableGlow ? 'text-shadow: 0 0 5px ' + CONFIG.glowColor + ';' : ''}
    }

    .bot-message a:hover {
      color: #004d99;
      ${CONFIG.enableGlow ? 'text-shadow: 0 0 8px ' + CONFIG.glowColor + ';' : ''}
    }

    #inputContainer {
      padding: 15px;
      background: rgba(255, 255, 255, 0.15);
      border-top: 1px solid ${CONFIG.borderColor};
      display: flex;
      gap: 10px;
      ${CONFIG.enableBlur ? 'backdrop-filter: blur(5px);' : ''}
      ${CONFIG.enableBlur ? '-webkit-backdrop-filter: blur(5px);' : ''}
    }

    #messageInput {
      flex-grow: 1;
      padding: 10px 15px;
      border: 1px solid ${CONFIG.borderColor};
      border-radius: 20px;
      background: rgba(255, 255, 255, 0.15);
      color: ${CONFIG.textColor};
      outline: none;
      transition: all ${CONFIG.animationDuration} ease;
      ${CONFIG.enableAutoResize ? 'resize: none;' : ''}
      min-height: 40px;
      max-height: 120px;
      font-size: ${CONFIG.fontSize};
      font-family: ${CONFIG.fontFamily};
      ${CONFIG.enableBlur ? 'backdrop-filter: blur(5px);' : ''}
      ${CONFIG.enableBlur ? '-webkit-backdrop-filter: blur(5px);' : ''}
    }

    #messageInput::placeholder {
      color: rgba(44, 44, 44, 0.6);
    }

    #messageInput:focus {
      border-color: ${CONFIG.primaryColor};
      ${CONFIG.enableGlow ? 'box-shadow: 0 0 15px ' + CONFIG.glowColor + ';' : ''}
    }

    #sendButton {
      padding: 10px 20px;
      border: none;
      border-radius: 20px;
      background: linear-gradient(135deg, ${CONFIG.primaryColor}, ${CONFIG.secondaryColor});
      color: #ffffff;
      cursor: pointer;
      transition: all ${CONFIG.animationDuration} ease;
      font-weight: 500;
      font-size: ${CONFIG.fontSize};
      ${CONFIG.enableGlow ? 'box-shadow: 0 2px 10px ' + CONFIG.glowColor + ';' : ''}
    }

    #sendButton:hover {
      ${CONFIG.enableAnimations ? 'transform: translateY(-1px);' : ''}
      ${CONFIG.enableGlow ? 'box-shadow: 0 4px 15px ' + CONFIG.glowColor + ';' : ''}
    }

    #sendButton:disabled {
      background: rgba(255, 255, 255, 0.1);
      color: rgba(255, 255, 255, 0.5);
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    #chatMessages {
      flex-grow: 1;
      padding: 15px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 8px;
      background: rgba(255, 255, 255, 0.15);
      color: ${CONFIG.textColor};
    }

    #chatMessages::-webkit-scrollbar {
      width: 6px;
    }

    #chatMessages::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    #chatMessages::-webkit-scrollbar-thumb {
      background: ${CONFIG.glowColor};
      border-radius: 3px;
    }

    #chatMessages::-webkit-scrollbar-thumb:hover {
      background: ${CONFIG.primaryColor};
    }
  `;

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing chat interface...');

    // Create and inject style element
    const styleSheet = document.createElement("style");
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);

    // Create chat elements
    function createChatElements() {
      console.log('Creating chat elements...');
      
      // Create chat button
      const chatButton = document.createElement('button');
      chatButton.id = 'chatButton';
      chatButton.setAttribute('aria-label', 'Open Chat');
      document.body.appendChild(chatButton);

      // Create chat container
      const chatContainer = document.createElement('div');
      chatContainer.id = 'chatContainer';

      // Create chat header
      const chatHeader = document.createElement('div');
      chatHeader.id = 'chatHeader';
      
      const headerTitle = document.createElement('h3');
      headerTitle.textContent = CONFIG.botName;
      
      const closeButton = document.createElement('button');
      closeButton.id = 'closeButton';
      closeButton.setAttribute('aria-label', 'Close Chat');
      closeButton.textContent = '×';
      
      chatHeader.appendChild(headerTitle);
      chatHeader.appendChild(closeButton);

      // Create chat messages container
      const chatMessages = document.createElement('div');
      chatMessages.id = 'chatMessages';

      // Create input container
      const inputContainer = document.createElement('div');
      inputContainer.id = 'inputContainer';
      
      const messageInput = document.createElement('textarea');
      messageInput.id = 'messageInput';
      messageInput.setAttribute('placeholder', CONFIG.placeholder);
      messageInput.setAttribute('rows', '1');
      
      const sendButton = document.createElement('button');
      sendButton.id = 'sendButton';
      sendButton.textContent = 'Send';

      inputContainer.appendChild(messageInput);
      inputContainer.appendChild(sendButton);

      // Assemble chat container
      chatContainer.appendChild(chatHeader);
      chatContainer.appendChild(chatMessages);
      chatContainer.appendChild(inputContainer);
      document.body.appendChild(chatContainer);

      return {
        chatButton,
        chatContainer,
        closeButton,
        chatMessages,
        messageInput,
        sendButton
      };
    }

    // Initialize elements
    const elements = createChatElements();
    const {
      chatButton,
      chatContainer,
      closeButton,
      chatMessages,
      messageInput,
      sendButton
    } = elements;

    // Resource URLs from configuration
    const RESOURCES = {
      linkedin: CONFIG.linkedin,
      scholar: CONFIG.scholar,
      portfolio: CONFIG.portfolio,
      saePost: CONFIG.saePost,
      resume: CONFIG.resume,
      orcid: CONFIG.orcid,
      github: CONFIG.github,
      githubRepos: CONFIG.githubRepos
    };

    // Website Structure from configuration
    const WEBSITE_PAGES = {
      home: CONFIG.homeUrl,
      projects: CONFIG.projectsUrl,
      about: CONFIG.aboutUrl,
      blog: CONFIG.blogUrl,
      contact: CONFIG.contactUrl
    };

    // Chat state
    let isChatOpen = false;
    let isProcessing = false;
    let conversationHistory = [];

    // Enhanced system prompt with configuration
    const SYSTEM_PROMPT = `${CONFIG.systemPrompt}

    Available Links:
    ${Object.entries(RESOURCES).map(([key, url]) => `- ${key}: ${url}`).join('\n')}

    Website Pages:
    ${Object.entries(WEBSITE_PAGES).map(([page, url]) => `- ${page}: ${url}`).join('\n')}

    Resume/Bio Content:
    ${CONFIG.resumeContent}
    `;

    // Auto-resize textarea if enabled
    if (CONFIG.enableAutoResize) {
      messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
      });
    }

    // Toggle chat window with animation
    chatButton.addEventListener('click', (e) => {
      e.stopPropagation();
      console.log('Chat button clicked');
      isChatOpen = !isChatOpen;
      if (isChatOpen) {
        chatContainer.style.display = 'flex';
        if (CONFIG.enableAnimations) {
          chatContainer.offsetHeight; // Force reflow
          chatContainer.classList.add('active');
        }
        messageInput.focus();
      } else {
        if (CONFIG.enableAnimations) {
          chatContainer.classList.remove('active');
          setTimeout(() => {
            chatContainer.style.display = 'none';
          }, parseFloat(CONFIG.animationDuration) * 1000);
        } else {
          chatContainer.style.display = 'none';
        }
      }
    });

    // Close chat window with animation
    closeButton.addEventListener('click', (e) => {
      e.stopPropagation();
      console.log('Close button clicked');
      isChatOpen = false;
      if (CONFIG.enableAnimations) {
        chatContainer.classList.remove('active');
        setTimeout(() => {
          chatContainer.style.display = 'none';
        }, parseFloat(CONFIG.animationDuration) * 1000);
      } else {
        chatContainer.style.display = 'none';
      }
    });

    // Close chat when clicking outside (if enabled)
    if (CONFIG.enableClickOutside) {
      document.addEventListener('click', (e) => {
        if (isChatOpen && 
            !chatContainer.contains(e.target) && 
            !chatButton.contains(e.target)) {
          console.log('Clicked outside chat');
          isChatOpen = false;
          if (CONFIG.enableAnimations) {
            chatContainer.classList.remove('active');
            setTimeout(() => {
              chatContainer.style.display = 'none';
            }, parseFloat(CONFIG.animationDuration) * 1000);
          } else {
            chatContainer.style.display = 'none';
          }
        }
      });
    }

    // Prevent clicks inside chat container from closing it
    chatContainer.addEventListener('click', (e) => {
      e.stopPropagation();
    });

    // Format message with proper spacing and links
    function formatMessage(text) {
      const urlRegex = /(https?:\/\/[^\s]+)/g;
      return text
        .replace(urlRegex, '<a href="$1" target="_blank">$1</a>')
        .split('\n')
        .map(line => `<p>${line}</p>`)
        .join('');
    }

    // Send message function with full API configuration
    async function sendMessage() {
      const message = messageInput.value.trim();
      if (!message || isProcessing) return;

      addMessage(message, 'user');
      messageInput.value = '';
      if (CONFIG.enableAutoResize) {
        messageInput.style.height = 'auto';
      }
      isProcessing = true;
      sendButton.disabled = true;
      messageInput.disabled = true;

      try {
        const loadingMessage = addMessage('...', 'bot');
        
        const context = [
          conversationHistory.map(history => history.role === 'user' ? history.content : '').join('\n\n'),
          conversationHistory.map(history => history.role === 'assistant' ? history.content : '').join('\n\n')
        ].filter(Boolean).join('\n\n');

        conversationHistory.push({ role: 'user', content: message });

        const requestBody = {
          model: CONFIG.model,
          messages: [
            { role: 'system', content: SYSTEM_PROMPT },
            ...conversationHistory,
            { 
              role: 'user', 
              content: `Available information:\n${context}\n\nQuestion: ${message}`
            }
          ],
          max_tokens: CONFIG.maxTokens,
          temperature: CONFIG.temperature,
          stream: false
        };

        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), CONFIG.timeout);

        try {
          const response = await fetch(CONFIG.apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${CONFIG.apiKey}`,
              'HTTP-Referer': window.location.origin,
              'X-Title': 'AI Chat Interface'
            },
            body: JSON.stringify(requestBody),
            signal: controller.signal
          });

          clearTimeout(timeoutId);

          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`API error: ${response.status}, ${errorText}`);
          }

          const data = await response.json();
          
          loadingMessage.remove();

          if (data.choices && data.choices[0] && data.choices[0].message) {
            const botResponse = data.choices[0].message.content;
            addMessage(botResponse, 'bot', true);
            conversationHistory.push({ role: 'assistant', content: botResponse });
          } else {
            addMessage('I apologize, but I encountered an error. Please try again.', 'bot');
          }
        } catch (fetchError) {
          clearTimeout(timeoutId);
          if (fetchError.name === 'AbortError') {
            throw new Error('Request timed out. Please try again.');
          }
          throw fetchError;
        }
      } catch (error) {
        console.error('Error:', error);
        addMessage(`I apologize, but I encountered an error: ${error.message}. Please try again.`, 'bot');
      } finally {
        isProcessing = false;
        sendButton.disabled = false;
        messageInput.disabled = false;
        messageInput.focus();
      }
    }

    // Add message to chat with animation
    function addMessage(text, sender, isFormatted = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${sender}-message`;
      if (isFormatted) {
        messageDiv.innerHTML = formatMessage(text);
      } else {
        messageDiv.textContent = text;
      }
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      return messageDiv;
    }

    // Event listeners for sending messages
    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    // Add welcome message when chat is opened
    chatButton.addEventListener('click', () => {
      if (isChatOpen && chatMessages.children.length === 0) {
        addMessage(CONFIG.welcomeMessage, 'bot', true);
      }
    });

    console.log('Chat interface initialized successfully');
  });
})();